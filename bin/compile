#!/bin/bash

APP_DIR="$1"
ENV_DIR="$3"

# load required environment variables
GIT_REPO_URL=$(<"$ENV_DIR/GIT_REPO_URL")
GIT_USERNAME=$(<"$ENV_DIR/GIT_USERNAME")
GIT_OAUTH=$(<"$ENV_DIR/GIT_OAUTH")

if [[ -z $GIT_USERNAME ]]; then
    echo "Did you forget to set GIT_USERNAME?"
    exit 1
fi

if [[ -z $GIT_OAUTH ]]; then
    echo "Did you forget to set OAUTH Token?"
    exit 1
fi

if [[ -z $GIT_REPO_URL ]]; then
    echo "Did you forget to set GIT_REPO_URL?"
    exit 1
fi

GIT_REPO_URL_OAUTH=$(sed "s/github.com/$GIT_USERNAME:$GIT_OAUTH@github.com/g" <<<$GIT_REPO_URL)
echo "-----> Created new gitlink $GIT_REPO_URL_OAUTH"
# make sure we're in the root of the app dir
cd "$APP_DIR"

# remove existing .gitmodules, we'll check out it again
rm .gitmodules

# create an empty repo to fetch into
git init -q

# enable sparse checkouts, this will avoid checking out
# all the files in the repo, we'll only check out .gitmodules
git config core.sparseCheckout true

echo ".gitmodules" > .git/info/sparse-checkout

# add the repo as a remote and fetch the repo's history
git remote add origin "$GIT_REPO_URL_OAUTH"

# checkout the revision that's being deployed
git fetch -q --depth 1 origin -a > /dev/null
git checkout -q ${SOURCE_VERSION:-main} > /dev/null
echo "-----> Fetched shallow history from $GIT_REPO_URL_OAUTH"
#sed "s/github.com/$GIT_USERNAME:$GIT_OAUTH@github.com/g" .gitmodules
# initialize all the submodules
git submodule -q update --init --recursive
echo "-----> Checked out all submodules"
git submodule status | sed 's/^/       * /'